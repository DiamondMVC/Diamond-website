@[
  layout:
    layout
---
  route:
    blog
---
  placeholders:
  [
    "title": "Blog"
  ]
]

<div class="d-content-box">
  <div class="d-content-entry">
    <div class="d-content-entry d-content-entry-left n-visible-md n-visible-lg" n-resp="md,lg" n-resp-bind="blogsMenu">
      @{
        struct BlogEntry
        {
          string path;
          string time;
          string title;
          string author;
        }

        struct BlogCollection
        {
          BlogEntry[] entries;
        }

        import std.file : readText, thisExePath, exists;
        import std.algorithm : filter;
        import std.array : split, replace, array;
        import std.path : baseName, dirName, absolutePath;

        auto rootPath = absolutePath(dirName(thisExePath));

        import vibe.data.json : deserializeJson;

        auto blogEntries = deserializeJson!BlogCollection(readText(rootPath ~ "/blogs/blogs.json")).entries;

        auto selectedBlog = client.route.action && client.route.action ? client.route.action : blogEntries[0].path.replace("_", "-");

        auto matching = blogEntries
          .filter!(b => selectedBlog && baseName(b.path).replace("_", "-").split(".")[0] == selectedBlog)
          .array;

        BlogEntry selected;

        if (matching && matching.length)
        {
          selected = matching[0];
        }
      }

      <ul>
        @:if (blogEntries) foreach (blogEntry; blogEntries) {
          <li>
            <a href="/blog/@=blogEntry.path.replace("_", "-");">
              @=blogEntry.time;
              <br>
              @=blogEntry.title;
            </a>
          </li>
        }
      </ul>
    </div>

    <div class="d-content-entry d-content-entry-right n-visible-md n-visible-lg" n-resp="md,lg" n-resp-bind="blogsContent">
      @{
        auto blogsFile = (selectedBlog && selectedBlog.length ? selectedBlog : "_").replace("-", "_") ~ ".md";
        auto blogsPath = rootPath ~ "/blogs/" ~ blogsFile;

        string content;

        if (exists(blogsPath))
        {
          import diamond.markdown : parseToHtml;
          content = parseToHtml(readText(blogsPath));
        }
      }

      @:if (!content || !content.strip().length) {
        <h3>Coming Soon!</h3>
      }
      @:else {
        <h4>@=selected.time;&nbsp;&nbsp;by @=selected.author;</h4>
        <br><br>
        @=content;
      }
    </div>

    <div class="n-visible-xs n-visible-sm">
      <div class="d-blogs-menu" n-resp="xs,sm" n-resp-bind="blogsMenu">
      </div>
      <br><br>
      <div class="d-blogs-content" n-resp="xs,sm" n-resp-bind="blogsContent">
      </div>
    </div>

    <div class="d-clear"></div>
  </div>
</div>

@:if (selected.path && selected.path.length && content && content.strip().length) {
  <div class="d-content-box">
    <div class="d-content-entry" style="background-color: #fff;">
      @:renderModel!"disqus"(selectedBlog);
    </div>
  </div>
}
